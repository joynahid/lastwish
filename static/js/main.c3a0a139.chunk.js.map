{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","form","display","margin","maxWidth","justifyContent","marg","App","userSubm","useState","error","setError","errorText","setErrorText","isLoaded","setIsLoaded","username","setUsername","mappedProblem","setMapped","medianAc","setMedian","allProblems","setAllProblems","tossedProblems","setTossedProblems","toughPercent","setToughPercent","btnDisabled","setBtnDisabled","yourMedian","setYourMedian","solved","classes","useEffect","fetch","then","res","json","result","ress","map","val","key","Object","assign","mp","i","length","contestId","toString","index","rating","sort","a","b","reverse","handleSubmit","event","preventDefault","er","console","log","catch","e","median","calcMedian","toss","tempSubm","forEach","item","problem","verdict","inx","push","Math","round","data","tempMapped","url","tags","includes","getDidntSolve","tossed","match","tossedSorted","slice","solvedCount","Container","style","fontFamily","paddingLeft","Paper","elevation","marginTop","lineHeight","Accordion","AccordionSummary","expandIcon","ExpandMoreOutlined","aria-controls","id","Typography","AccordionDetails","padding","marginBottom","FormControl","onSubmit","className","Input","placeholder","onChange","target","value","gutterBottom","Slider","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","min","max","Button","disabled","marginLeft","type","variant","onClick","Divider","Grid","container","spacing","paddingTop","CircularProgress","textAlign","Alert","severity","TableContainer","component","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","hover","href","name","lev","parentElement","nodeName","toLowerCase","innerHTML","revealTags","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3a0a139.chunk.js","sourcesContent":["import { React, useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Input from '@material-ui/core/Input';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Alert from '@material-ui/lab/Alert';\nimport { Accordion, AccordionDetails, AccordionSummary, Button, CircularProgress, Container, Divider, Grid } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Box from '@material-ui/core/Box';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport { ExpandMoreOutlined } from '@material-ui/icons';\nimport './App.css'\nimport './index.css'\n\nfunction LinearProgressWithLabel(props) {\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <Box width=\"100%\" mr={1}>\n                <LinearProgress variant=\"determinate\" {...props} />\n            </Box>\n            <Box minWidth={35}>\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n                    props.value,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}\n\nLinearProgressWithLabel.propTypes = {\n    /**\n     * The value of the progress indicator for the determinate and buffer variants.\n     * Value between 0 and 100.\n     */\n    value: PropTypes.number.isRequired,\n};\n\n\nconst useStyles = makeStyles({\n    form: {\n        display: 'flex',\n        margin: '1em',\n        maxWidth: 500,\n        justifyContent: 'center',\n    },\n    marg: {\n        margin: '10px',\n    }\n});\n\nfunction App() {\n    const [error, setError] = useState(null);\n    const [errorText, setErrorText] = useState();\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [username, setUsername] = useState();\n    const [mappedProblem, setMapped] = useState({});\n    const [medianAc, setMedian] = useState();\n    const [allProblems, setAllProblems] = useState();\n    const [tossedProblems, setTossedProblems] = useState();\n    const [toughPercent, setToughPercent] = useState(120);\n    const [btnDisabled, setBtnDisabled] = useState(true);\n    const [yourMedian, setYourMedian] = useState();\n\n    let userSubm, solved = {};\n    const classes = useStyles();\n\n    // Note: the empty deps array [] means\n    // this useEffect will run once\n    // similar to componentDidMount()\n    useEffect(() => {\n        fetch(\"https://codeforces.com/api/problemset.problems?&lang=en\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    let ress = result['result']['problems'];\n\n                    result['result']['problemStatistics'].map((val, key) => {\n                        Object.assign(ress[key], val);\n                    });\n\n                    let mp = {};\n\n                    for (let i = 0; i < ress.length; i++) {\n                        mp[ress[i].contestId.toString() + '/' + ress[i].index] = ress[i].rating\n                    }\n\n                    setMapped(mp);\n\n                    ress.sort((a, b) => a.rating - b.rating);\n                    ress.reverse();\n\n                    setAllProblems(ress);\n                    setBtnDisabled(false);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setErrorText(\"Something went wrong! Please reload the page again.\")\n                    setError(error);\n                }\n            )\n    }, [])\n\n    useEffect(() => {\n        setTossedProblems(tossedProblems);\n        // console.log('Rendering', tossedProblems);\n    }, [tossedProblems]);\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        setTossedProblems(null);\n        setError(null);\n        setIsLoaded(false);\n\n        let er = false;\n\n        if (!username) {\n            setErrorText(\"Username Field can't be empty!\")\n            setError(error);\n            setIsLoaded(true);\n            return;\n        }\n\n        await fetch(`https://codeforces.com/api/user.status?handle=${username}&lang=en`)\n            .then(res => res.json())\n            .then((result) => {\n                console.log(result);\n                if (result['status'] == 'FAILED') {\n                    setErrorText(result['comment']);\n                    setError(true);\n                    er = true;\n                    setIsLoaded(true);\n                    return;\n                }\n                else {\n                    userSubm = result['result'];\n                    console.log('success');\n                }\n            })\n            .catch(e => {\n                setErrorText(\"Something went wrong.\")\n                setError(error);\n                return;\n            });\n\n        if (er) return;\n\n        let median = calcMedian();\n        toss(median);\n        setIsLoaded(true);\n    }\n\n    const calcMedian = () => {\n        let tempSubm = [];\n        userSubm.forEach(item => {\n            if (item.problem.contestId && item.problem.index && item.verdict === 'OK') {\n                let inx = item.problem.contestId.toString() + '/' + item.problem.index;\n                if (mappedProblem[inx]) {\n                    tempSubm.push(mappedProblem[inx]);\n                    solved[inx] = true;\n                }\n            }\n        });\n\n        tempSubm.sort((a, b) => a - b);\n\n        let median = tempSubm[Math.round((tempSubm.length + 1) / 2)];\n        setYourMedian(median);\n        median *= (toughPercent) / 100;\n        setMedian(median);\n\n        return median;\n    }\n\n    const getDidntSolve = (median) => {\n        let tempMapped = {};\n\n        allProblems.forEach(item => {\n            let inx = item.contestId.toString() + '/' + item.index;\n\n            let url = 'https://codeforces.com/problemset/problem/';\n            url += inx;\n\n            if (!item.tags.includes('*special'))\n                if (!solved[inx] && mappedProblem[inx] > median) {\n                    Object.assign(item, { 'url': url });\n                    tempMapped[inx] = item;\n                }\n        });\n\n        return tempMapped;\n    }\n\n    const toss = (median) => {\n        let data = getDidntSolve(median);\n\n        let tossed = [];\n\n        for (var key in data) {\n            let regx = /[A-Za-z]/g;\n            if (key.match(regx)) {\n                tossed.push(data[key]);\n            }\n        }\n\n        tossed.sort((a, b) => a.rating - b.rating);\n\n        let tossedSorted = tossed.slice(0, 20);\n\n        tossedSorted.sort((a, b) => b.solvedCount - a.solvedCount);\n\n        setTossedProblems(tossedSorted);\n\n        if (tossedSorted.length == 0) {\n            console.log('here');\n            setErrorText('Difficulty level too high. Codeforces doesn\\'t contain this much difficult problem yet');\n            setError(true);\n        }\n    }\n\n    const revealTags = (event, index) => {\n        let tags = tossedProblems[index]['tags'].map(item => item);\n        let lev = event.target.parentElement;\n\n        if (lev.nodeName.toLowerCase() == 'td') {\n            lev.innerHTML = tags;\n        }\n        else {\n            lev.parentElement.innerHTML = tags;\n        }\n    }\n\n    return (\n        <Container maxWidth=\"lg\">\n            <h1 style={{fontFamily: 'consolas, monospace', paddingLeft:'10px'}}>Last Wish</h1>\n            <Paper elevation={1} style={{ marginTop: '2em', lineHeight: '1.5' }}>\n                <Accordion>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreOutlined />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                    >\n                        <Typography>What the hell is this?</Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Typography>\n                            Hey there! Welcome to Last Wish! It's a trainer that will help you suggest good problems according to your codeforces profile. You can optionally use the difficulty progress bar to fix <b>uncomfortable</b> problem for you. That's the best practice right?\n                            <br /> <br/>\n                            Just input your Codeforces handle and <b>Toss</b> it to grab some tough problems to solve.\n                        </Typography>\n                    </AccordionDetails>\n                </Accordion>\n\n                {/* <p>What is Median?</p> */}\n                {/* <Divider/> */}\n                {/* <p>Let's say, you have a list of integers of your solved problems' rating, a=[1, 2, 4, 5, 3]. Now sort this list, a=[1, 2, 3, 4, 5]. The median is = a[(a.length+1)/2] = a[3] = 3.</p> */}\n            </Paper>\n\n            <Paper elevation={1} style={{ padding: '1em', marginBottom: '10px', marginTop: '1em' }}>\n                <FormControl onSubmit={handleSubmit} className={classes.form}>\n                    <Input\n                        id=\"input-with-icon-adornment\"\n                        placeholder=\"Codeforces Handle\"\n                        onChange={e => setUsername(e.target.value)}\n                        value={username}\n                        style={{ marginBottom: '2em' }}\n                    />\n\n                    <Typography style={{ marginTop: '0em' }} id=\"discrete-slider\" gutterBottom>\n                        Difficulty Level\n                    </Typography>\n                    <Slider\n                        defaultValue={40}\n                        getAriaValueText={(value => {\n                            setToughPercent(value + 100);\n                            return value;\n                        })}\n                        aria-labelledby=\"input-slider\"\n                        valueLabelDisplay=\"auto\"\n                        step={1}\n                        // marks\n                        min={0}\n                        max={100}\n                    />\n                </FormControl>\n\n                <Button disabled={btnDisabled} style={{ marginLeft: '1em', marginBottom: '2em' }} type=\"submit\" variant=\"contained\" onClick={handleSubmit}>Toss</Button>\n\n                <Divider />\n\n                {yourMedian && <Grid container spacing={1} style={{ padding: '1em' }}><Grid item='xs' style={{ paddingTop: '6px' }}><StarBorderIcon /></Grid><Grid item=\"xs\" style={{ paddingTop: '10px' }}>Your current Median Rating is {yourMedian}</Grid></Grid>}\n\n            </Paper>\n\n            {!isLoaded && <CircularProgress style={{ textAlign: 'center', padding: '1em', justifyContent: 'center' }} />}\n            {error && <Alert severity=\"error\">{errorText}</Alert>}\n            {\n                tossedProblems &&\n                <TableContainer component={Paper} style={{ marginBottom: '2em' }}>\n                    <Typography style={{ padding: '1em' }} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                        Suggested Problems\n                </Typography>\n                    <Table stickyHeader aria-label=\"sticky table\">\n                        <caption>Showing problems more than {medianAc} rating</caption>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align='center'>Contest</TableCell>\n                                <TableCell align=\"left\">Name</TableCell>\n                                <TableCell align=\"left\">Solved by</TableCell>\n                                <TableCell align=\"left\">Tags</TableCell>\n                                <TableCell align=\"left\">Timer</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                tossedProblems.map((item, inx) => (\n                                    <TableRow\n                                        key={item.url}\n                                        hover\n                                    >\n                                        <TableCell align=\"center\">\n                                            <b>{item.contestId}{item.index}</b>\n                                        </TableCell>\n                                        <TableCell align=\"left\">\n                                            <a target='__blank' href={item.url}>{item.name}</a>\n                                        </TableCell>\n\n                                        <TableCell align=\"left\">\n                                            {item.solvedCount}\n                                        </TableCell>\n\n                                        <TableCell align=\"left\">\n                                            <Button onClick={(e) => revealTags(e, inx)}>Show Tags</Button>\n                                        </TableCell>\n\n                                        <TableCell align=\"left\">\n                                            <Button>Start Timer</Button>\n                                        </TableCell>\n                                    </TableRow>\n                                ))\n                            }\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            }\n        </Container>\n    );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}